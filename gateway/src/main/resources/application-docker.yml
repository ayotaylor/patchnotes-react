spring:
  application:
    name: gateway
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lowerCaseServiceId: true
      routes:
        - id: user-service
          uri: lb://userservice
          predicates:
            - Path=/api/auth/**,/api/users/**
            - Method=GET,POST,PUT,DELETE
          filters:
            #- RewritePath=/api/(?<segment>.*), /$\{segment}
            # - name: RequestRateLimiter
            #   args:
            #     redis-rate-limiter:
            #       replenishRate: 10
            #       burstCapacity: 20
            #       deny-empty-key: false
            #     key-resolver: "#{@userKeyResolver}"
            # - name: CircuitBreaker
            #   args:
            #     name: userServiceCircuitBreaker
            #     fallbackUri: forward:/fallback
            # - name: Retry
            #   args:
            #     retries: 10
            #     statuses: BAD_GATEWAY
            # - name: JwtAuthentication
            #   args:
            #     tokenHeader: Authorization
            #     tokenPrefix: "Bearer "
            #     allowPublicEndpoints: true
            #     publicEndpoints: "/api/auth/login,/api/auth/register,/actuator/info,/actuator/health"
        - id: game-service
          uri: lb://gameservice
          predicates:
            - Path=/api/games/**,/actuator/health
          filters:
            # - RewritePath=/api/posts/(?<segment>.*), /$\{segment}
            # - name: CircuitBreaker
            #   args:
            #     name: userServiceCircuitBreaker
            #     fallbackUri: forward:/fallback
            # - name: Retry
            #   args:
            #     retries: 3
            #     statuses: BAD_GATEWAY
            # - name: JwtAuthentication
            #   args:
            #     tokenHeader: Authorization
            #     tokenPrefix: "Bearer "
            #     allowPublicEndpoints: true
            #     publicEndpoints: "/actuator/info,/actuator/health"
#   data:
#     redis:
#       host: redis
#       port: 6379

eureka:
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://eureka-server:8761/eureka/ #http://admin:password@localhost:8761/eureka #rep;ace with eureka-server in docker version of this file

server:
  port: 8080

# logging:
#   level:
#     org:
#       springframework:
#         security: DEBUG
#         netflix: DEBUG
#         web:
#           reactive: DEBUG
#         cloud:
#           gateway: DEBUG
#           netflix:
#             eureka: DEBUG
#           client:
#             loadbalancer: DEBUG

jwt: # change secret
  secret: 8d7caec7c5cdc2e69d174e54fb8253ee0e929c5a295651629fcdab24667da806
  expiration: 3600000  # 1 hour in milliseconds